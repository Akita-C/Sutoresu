/* tslint:disable */
/* eslint-disable */
/**
 * Nemui API
 * API built with .NET
 *
 * The version of the OpenAPI document: v1
 * Contact: tranducquang.apolos@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  expiresAt?: string;
  /**
   *
   * @type {UserProfileDto}
   * @memberof AuthResponse
   */
  user?: UserProfileDto;
}
/**
 *
 * @export
 * @interface AuthResponseApiResponse
 */
export interface AuthResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof AuthResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof AuthResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {AuthResponse}
   * @memberof AuthResponseApiResponse
   */
  data?: AuthResponse;
}
/**
 *
 * @export
 * @interface BooleanApiResponse
 */
export interface BooleanApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof BooleanApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof BooleanApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof BooleanApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {boolean}
   * @memberof BooleanApiResponse
   */
  data?: boolean;
}
/**
 *
 * @export
 * @interface BulkCreateQuestionsRequest
 */
export interface BulkCreateQuestionsRequest {
  /**
   *
   * @type {string}
   * @memberof BulkCreateQuestionsRequest
   */
  quizId?: string;
  /**
   *
   * @type {Array<CreateQuestionItem>}
   * @memberof BulkCreateQuestionsRequest
   */
  questions?: Array<CreateQuestionItem> | null;
}
/**
 *
 * @export
 * @interface BulkCreateQuestionsResponse
 */
export interface BulkCreateQuestionsResponse {
  /**
   *
   * @type {Array<QuestionDto>}
   * @memberof BulkCreateQuestionsResponse
   */
  successfulQuestions?: Array<QuestionDto> | null;
  /**
   *
   * @type {Array<QuestionCreationError>}
   * @memberof BulkCreateQuestionsResponse
   */
  failedQuestions?: Array<QuestionCreationError> | null;
  /**
   *
   * @type {number}
   * @memberof BulkCreateQuestionsResponse
   */
  totalProcessed?: number;
  /**
   *
   * @type {number}
   * @memberof BulkCreateQuestionsResponse
   */
  successCount?: number;
  /**
   *
   * @type {number}
   * @memberof BulkCreateQuestionsResponse
   */
  failureCount?: number;
}
/**
 *
 * @export
 * @interface BulkCreateQuestionsResponseApiResponse
 */
export interface BulkCreateQuestionsResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof BulkCreateQuestionsResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof BulkCreateQuestionsResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof BulkCreateQuestionsResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {BulkCreateQuestionsResponse}
   * @memberof BulkCreateQuestionsResponseApiResponse
   */
  data?: BulkCreateQuestionsResponse;
}
/**
 *
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  currentPassword?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  newPassword?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  confirmNewPassword?: string | null;
}
/**
 *
 * @export
 * @interface CreateQuestionItem
 */
export interface CreateQuestionItem {
  /**
   *
   * @type {string}
   * @memberof CreateQuestionItem
   */
  content?: string | null;
  /**
   *
   * @type {QuestionType}
   * @memberof CreateQuestionItem
   */
  questionType?: QuestionType;
  /**
   *
   * @type {number}
   * @memberof CreateQuestionItem
   */
  timeLimitInSeconds?: number;
  /**
   *
   * @type {number}
   * @memberof CreateQuestionItem
   */
  points?: number;
  /**
   *
   * @type {string}
   * @memberof CreateQuestionItem
   */
  imageBase64?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateQuestionItem
   */
  imageFileName?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateQuestionItem
   */
  configuration?: string | null;
  /**
   *
   * @type {string}
   * @memberof CreateQuestionItem
   */
  explanation?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateQuestionItem
   */
  order?: number;
}

/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {boolean}
   * @memberof ErrorResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ErrorResponse
   */
  errors?: Array<string> | null;
}
/**
 *
 * @export
 * @interface GuidInt32DictionaryApiResponse
 */
export interface GuidInt32DictionaryApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof GuidInt32DictionaryApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof GuidInt32DictionaryApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof GuidInt32DictionaryApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {{ [key: string]: number; }}
   * @memberof GuidInt32DictionaryApiResponse
   */
  data?: { [key: string]: number } | null;
}
/**
 *
 * @export
 * @interface ImageResponse
 */
export interface ImageResponse {
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  publicId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  url?: string | null;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  secureUrl?: string | null;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  format?: string | null;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  bytes?: number;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  createdAt?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof ImageResponse
   */
  transformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface ImageResponseApiResponse
 */
export interface ImageResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof ImageResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof ImageResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ImageResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {ImageResponse}
   * @memberof ImageResponseApiResponse
   */
  data?: ImageResponse;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password?: string | null;
}
/**
 *
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
  /**
   *
   * @type {string}
   * @memberof LogoutRequest
   */
  refreshToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof LogoutRequest
   */
  accessToken?: string | null;
}
/**
 *
 * @export
 * @interface QuestionCreationError
 */
export interface QuestionCreationError {
  /**
   *
   * @type {number}
   * @memberof QuestionCreationError
   */
  order?: number;
  /**
   *
   * @type {string}
   * @memberof QuestionCreationError
   */
  content?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuestionCreationError
   */
  errors?: Array<string> | null;
}
/**
 *
 * @export
 * @interface QuestionDto
 */
export interface QuestionDto {
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  content?: string | null;
  /**
   *
   * @type {QuestionType}
   * @memberof QuestionDto
   */
  questionType?: QuestionType;
  /**
   *
   * @type {number}
   * @memberof QuestionDto
   */
  timeLimitInSeconds?: number;
  /**
   *
   * @type {number}
   * @memberof QuestionDto
   */
  points?: number;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  imageUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  configuration?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  explanation?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  updatedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  quizId?: string;
  /**
   *
   * @type {string}
   * @memberof QuestionDto
   */
  quizTitle?: string | null;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof QuestionDto
   */
  imageTransformations?: { [key: string]: string } | null;
}

/**
 *
 * @export
 * @interface QuestionDtoApiResponse
 */
export interface QuestionDtoApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuestionDtoApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuestionDtoApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuestionDtoApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {QuestionDto}
   * @memberof QuestionDtoApiResponse
   */
  data?: QuestionDto;
}
/**
 *
 * @export
 * @interface QuestionDtoIEnumerableApiResponse
 */
export interface QuestionDtoIEnumerableApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuestionDtoIEnumerableApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuestionDtoIEnumerableApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuestionDtoIEnumerableApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<QuestionDto>}
   * @memberof QuestionDtoIEnumerableApiResponse
   */
  data?: Array<QuestionDto> | null;
}
/**
 *
 * @export
 * @interface QuestionDtoPagedResponse
 */
export interface QuestionDtoPagedResponse {
  /**
   *
   * @type {Array<QuestionDto>}
   * @memberof QuestionDtoPagedResponse
   */
  data?: Array<QuestionDto> | null;
  /**
   *
   * @type {string}
   * @memberof QuestionDtoPagedResponse
   */
  nextCursor?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof QuestionDtoPagedResponse
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof QuestionDtoPagedResponse
   */
  count?: number;
}
/**
 *
 * @export
 * @interface QuestionDtoPagedResponseApiResponse
 */
export interface QuestionDtoPagedResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuestionDtoPagedResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuestionDtoPagedResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuestionDtoPagedResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {QuestionDtoPagedResponse}
   * @memberof QuestionDtoPagedResponseApiResponse
   */
  data?: QuestionDtoPagedResponse;
}
/**
 *
 * @export
 * @enum {number}
 */

export const QuestionType = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export type QuestionType = (typeof QuestionType)[keyof typeof QuestionType];

/**
 *
 * @export
 * @interface QuizDto
 */
export interface QuizDto {
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  thumbnailUrl?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof QuizDto
   */
  isPublic?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  category?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  tags?: string | null;
  /**
   *
   * @type {number}
   * @memberof QuizDto
   */
  estimatedDurationMinutes?: number;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  updatedAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  creatorId?: string;
  /**
   *
   * @type {string}
   * @memberof QuizDto
   */
  creatorName?: string | null;
  /**
   *
   * @type {number}
   * @memberof QuizDto
   */
  questionCount?: number;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof QuizDto
   */
  thumbnailTransformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface QuizDtoApiResponse
 */
export interface QuizDtoApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuizDtoApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizDtoApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuizDtoApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {QuizDto}
   * @memberof QuizDtoApiResponse
   */
  data?: QuizDto;
}
/**
 *
 * @export
 * @interface QuizDtoIEnumerableApiResponse
 */
export interface QuizDtoIEnumerableApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuizDtoIEnumerableApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizDtoIEnumerableApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuizDtoIEnumerableApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<QuizDto>}
   * @memberof QuizDtoIEnumerableApiResponse
   */
  data?: Array<QuizDto> | null;
}
/**
 *
 * @export
 * @interface QuizSummaryDto
 */
export interface QuizSummaryDto {
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  title?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  thumbnailUrl?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof QuizSummaryDto
   */
  isPublic?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  category?: string | null;
  /**
   *
   * @type {number}
   * @memberof QuizSummaryDto
   */
  estimatedDurationMinutes?: number;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  creatorId?: string;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDto
   */
  creatorName?: string | null;
  /**
   *
   * @type {number}
   * @memberof QuizSummaryDto
   */
  questionCount?: number;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof QuizSummaryDto
   */
  thumbnailTransformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface QuizSummaryDtoIEnumerableApiResponse
 */
export interface QuizSummaryDtoIEnumerableApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuizSummaryDtoIEnumerableApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDtoIEnumerableApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuizSummaryDtoIEnumerableApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {Array<QuizSummaryDto>}
   * @memberof QuizSummaryDtoIEnumerableApiResponse
   */
  data?: Array<QuizSummaryDto> | null;
}
/**
 *
 * @export
 * @interface QuizSummaryDtoPagedResponse
 */
export interface QuizSummaryDtoPagedResponse {
  /**
   *
   * @type {Array<QuizSummaryDto>}
   * @memberof QuizSummaryDtoPagedResponse
   */
  data?: Array<QuizSummaryDto> | null;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDtoPagedResponse
   */
  nextCursor?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof QuizSummaryDtoPagedResponse
   */
  hasNextPage?: boolean;
  /**
   *
   * @type {number}
   * @memberof QuizSummaryDtoPagedResponse
   */
  count?: number;
}
/**
 *
 * @export
 * @interface QuizSummaryDtoPagedResponseApiResponse
 */
export interface QuizSummaryDtoPagedResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof QuizSummaryDtoPagedResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof QuizSummaryDtoPagedResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof QuizSummaryDtoPagedResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {QuizSummaryDtoPagedResponse}
   * @memberof QuizSummaryDtoPagedResponseApiResponse
   */
  data?: QuizSummaryDtoPagedResponse;
}
/**
 *
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
  /**
   *
   * @type {string}
   * @memberof RefreshTokenRequest
   */
  refreshToken?: string | null;
}
/**
 *
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  password?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  passwordConfirmation?: string | null;
}
/**
 *
 * @export
 * @interface StringInt32DictionaryApiResponse
 */
export interface StringInt32DictionaryApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof StringInt32DictionaryApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof StringInt32DictionaryApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof StringInt32DictionaryApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {{ [key: string]: number; }}
   * @memberof StringInt32DictionaryApiResponse
   */
  data?: { [key: string]: number } | null;
}
/**
 *
 * @export
 * @interface UpdateQuestionBulkItem
 */
export interface UpdateQuestionBulkItem {
  /**
   *
   * @type {string}
   * @memberof UpdateQuestionBulkItem
   */
  questionId?: string;
  /**
   *
   * @type {UpdateQuestionRequest}
   * @memberof UpdateQuestionBulkItem
   */
  updateRequest?: UpdateQuestionRequest;
}
/**
 *
 * @export
 * @interface UpdateQuestionRequest
 */
export interface UpdateQuestionRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateQuestionRequest
   */
  content?: string | null;
  /**
   *
   * @type {QuestionType}
   * @memberof UpdateQuestionRequest
   */
  questionType?: QuestionType;
  /**
   *
   * @type {number}
   * @memberof UpdateQuestionRequest
   */
  timeLimitInSeconds?: number;
  /**
   *
   * @type {number}
   * @memberof UpdateQuestionRequest
   */
  points?: number;
  /**
   *
   * @type {File}
   * @memberof UpdateQuestionRequest
   */
  image?: File | null;
  /**
   *
   * @type {string}
   * @memberof UpdateQuestionRequest
   */
  configuration?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateQuestionRequest
   */
  explanation?: string | null;
}

/**
 *
 * @export
 * @interface UpdateUserProfileRequest
 */
export interface UpdateUserProfileRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateUserProfileRequest
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface UserProfileDto
 */
export interface UserProfileDto {
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  role?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof UserProfileDto
   */
  isEmailVerified?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  lastLoginAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof UserProfileDto
   */
  avatarTransformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface UserProfileDtoApiResponse
 */
export interface UserProfileDtoApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof UserProfileDtoApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserProfileDtoApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof UserProfileDtoApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {UserProfileDto}
   * @memberof UserProfileDtoApiResponse
   */
  data?: UserProfileDto;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost: async (
      loginRequest?: LoginRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLogoutPost: async (
      logoutRequest?: LogoutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        logoutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost: async (
      refreshTokenRequest?: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRegisterPost: async (
      registerRequest?: RegisterRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokeAllPost: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/revoke-all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokePost: async (
      refreshTokenRequest?: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/revoke`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthLoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthLoginPost(
          loginRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthLoginPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthLogoutPost(
      logoutRequest?: LogoutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthLogoutPost(
          logoutRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthLogoutPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRefreshPost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRefreshPost(
          refreshTokenRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRefreshPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRegisterPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRegisterPost(
          registerRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRegisterPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRevokeAllPost(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRevokeAllPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRevokeAllPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRevokePost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRevokePost(
          refreshTokenRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRevokePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthLoginPost(loginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLogoutPost(
      logoutRequest?: LogoutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthLogoutPost(logoutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthRefreshPost(refreshTokenRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRegisterPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthRegisterPost(registerRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokeAllPost(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthRevokeAllPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokePost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthRevokePost(refreshTokenRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthLoginPost(
    loginRequest?: LoginRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthLoginPost(loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LogoutRequest} [logoutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthLogoutPost(
    logoutRequest?: LogoutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthLogoutPost(logoutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshTokenRequest} [refreshTokenRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRefreshPost(
    refreshTokenRequest?: RefreshTokenRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRefreshPost(refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegisterRequest} [registerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRegisterPost(
    registerRequest?: RegisterRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRegisterPost(registerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRevokeAllPost(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRevokeAllPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshTokenRequest} [refreshTokenRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRevokePost(
    refreshTokenRequest?: RefreshTokenRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRevokePost(refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuestionsApi - axios parameter creator
 * @export
 */
export const QuestionsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchByQuizzesPost: async (
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "apiV1QuestionsBatchByQuizzesPost",
        "requestBody",
        requestBody,
      );
      const localVarPath = `/api/v1/Questions/batch/by-quizzes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchCountsPost: async (
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "apiV1QuestionsBatchCountsPost",
        "requestBody",
        requestBody,
      );
      const localVarPath = `/api/v1/Questions/batch/counts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchDelete: async (
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists(
        "apiV1QuestionsBatchDelete",
        "requestBody",
        requestBody,
      );
      const localVarPath = `/api/v1/Questions/batch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array<UpdateQuestionBulkItem>} updateQuestionBulkItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchPut: async (
      updateQuestionBulkItem: Array<UpdateQuestionBulkItem>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'updateQuestionBulkItem' is not null or undefined
      assertParamExists(
        "apiV1QuestionsBatchPut",
        "updateQuestionBulkItem",
        updateQuestionBulkItem,
      );
      const localVarPath = `/api/v1/Questions/batch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateQuestionBulkItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {BulkCreateQuestionsRequest} [bulkCreateQuestionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBulkPost: async (
      bulkCreateQuestionsRequest?: BulkCreateQuestionsRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Questions/bulk`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        bulkCreateQuestionsRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [quizId]
     * @param {string} [search]
     * @param {QuestionType} [questionType]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsGet: async (
      quizId?: string,
      search?: string,
      questionType?: QuestionType,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Questions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (quizId !== undefined) {
        localVarQueryParameter["QuizId"] = quizId;
      }

      if (search !== undefined) {
        localVarQueryParameter["Search"] = search;
      }

      if (questionType !== undefined) {
        localVarQueryParameter["QuestionType"] = questionType;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["SortBy"] = sortBy;
      }

      if (isDescending !== undefined) {
        localVarQueryParameter["IsDescending"] = isDescending;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["PageSize"] = pageSize;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["Cursor"] = cursor;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuestionsIdDelete", "id", id);
      const localVarPath = `/api/v1/Questions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuestionsIdGet", "id", id);
      const localVarPath = `/api/v1/Questions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdPut: async (
      id: string,
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuestionsIdPut", "id", id);
      const localVarPath = `/api/v1/Questions/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (content !== undefined) {
        localVarFormParams.append("Content", content as any);
      }

      if (questionType !== undefined) {
        localVarFormParams.append("QuestionType", questionType as any);
      }

      if (timeLimitInSeconds !== undefined) {
        localVarFormParams.append(
          "TimeLimitInSeconds",
          timeLimitInSeconds as any,
        );
      }

      if (points !== undefined) {
        localVarFormParams.append("Points", points as any);
      }

      if (image !== undefined) {
        localVarFormParams.append("Image", image as any);
      }

      if (configuration !== undefined) {
        localVarFormParams.append("Configuration", configuration as any);
      }

      if (explanation !== undefined) {
        localVarFormParams.append("Explanation", explanation as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {string} [quizId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsPost: async (
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      quizId?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Questions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (content !== undefined) {
        localVarFormParams.append("Content", content as any);
      }

      if (questionType !== undefined) {
        localVarFormParams.append("QuestionType", questionType as any);
      }

      if (timeLimitInSeconds !== undefined) {
        localVarFormParams.append(
          "TimeLimitInSeconds",
          timeLimitInSeconds as any,
        );
      }

      if (points !== undefined) {
        localVarFormParams.append("Points", points as any);
      }

      if (image !== undefined) {
        localVarFormParams.append("Image", image as any);
      }

      if (configuration !== undefined) {
        localVarFormParams.append("Configuration", configuration as any);
      }

      if (explanation !== undefined) {
        localVarFormParams.append("Explanation", explanation as any);
      }

      if (quizId !== undefined) {
        localVarFormParams.append("QuizId", quizId as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} quizId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuizQuizIdGet: async (
      quizId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'quizId' is not null or undefined
      assertParamExists("apiV1QuestionsQuizQuizIdGet", "quizId", quizId);
      const localVarPath = `/api/v1/Questions/quiz/{quizId}`.replace(
        `{${"quizId"}}`,
        encodeURIComponent(String(quizId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuestionsApi - functional programming interface
 * @export
 */
export const QuestionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    QuestionsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsBatchByQuizzesPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsBatchByQuizzesPost(
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsBatchByQuizzesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsBatchCountsPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GuidInt32DictionaryApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsBatchCountsPost(
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsBatchCountsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsBatchDelete(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsBatchDelete(
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsBatchDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {Array<UpdateQuestionBulkItem>} updateQuestionBulkItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsBatchPut(
      updateQuestionBulkItem: Array<UpdateQuestionBulkItem>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsBatchPut(
          updateQuestionBulkItem,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsBatchPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {BulkCreateQuestionsRequest} [bulkCreateQuestionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsBulkPost(
      bulkCreateQuestionsRequest?: BulkCreateQuestionsRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BulkCreateQuestionsResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsBulkPost(
          bulkCreateQuestionsRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsBulkPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [quizId]
     * @param {string} [search]
     * @param {QuestionType} [questionType]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsGet(
      quizId?: string,
      search?: string,
      questionType?: QuestionType,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoPagedResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsGet(
          quizId,
          search,
          questionType,
          sortBy,
          isDescending,
          pageSize,
          cursor,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsIdPut(
      id: string,
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsIdPut(
          id,
          content,
          questionType,
          timeLimitInSeconds,
          points,
          image,
          configuration,
          explanation,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {string} [quizId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsPost(
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      quizId?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsPost(
          content,
          questionType,
          timeLimitInSeconds,
          points,
          image,
          configuration,
          explanation,
          quizId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} quizId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuestionsQuizQuizIdGet(
      quizId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuestionDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuestionsQuizQuizIdGet(
          quizId,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuestionsApi.apiV1QuestionsQuizQuizIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * QuestionsApi - factory interface
 * @export
 */
export const QuestionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = QuestionsApiFp(configuration);
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchByQuizzesPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuestionsBatchByQuizzesPost(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchCountsPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GuidInt32DictionaryApiResponse> {
      return localVarFp
        .apiV1QuestionsBatchCountsPost(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchDelete(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1QuestionsBatchDelete(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array<UpdateQuestionBulkItem>} updateQuestionBulkItem
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBatchPut(
      updateQuestionBulkItem: Array<UpdateQuestionBulkItem>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuestionsBatchPut(updateQuestionBulkItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {BulkCreateQuestionsRequest} [bulkCreateQuestionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsBulkPost(
      bulkCreateQuestionsRequest?: BulkCreateQuestionsRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BulkCreateQuestionsResponseApiResponse> {
      return localVarFp
        .apiV1QuestionsBulkPost(bulkCreateQuestionsRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [quizId]
     * @param {string} [search]
     * @param {QuestionType} [questionType]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsGet(
      quizId?: string,
      search?: string,
      questionType?: QuestionType,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoPagedResponseApiResponse> {
      return localVarFp
        .apiV1QuestionsGet(
          quizId,
          search,
          questionType,
          sortBy,
          isDescending,
          pageSize,
          cursor,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1QuestionsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoApiResponse> {
      return localVarFp
        .apiV1QuestionsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsIdPut(
      id: string,
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoApiResponse> {
      return localVarFp
        .apiV1QuestionsIdPut(
          id,
          content,
          questionType,
          timeLimitInSeconds,
          points,
          image,
          configuration,
          explanation,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [content]
     * @param {QuestionType} [questionType]
     * @param {number} [timeLimitInSeconds]
     * @param {number} [points]
     * @param {File} [image]
     * @param {string} [configuration]
     * @param {string} [explanation]
     * @param {string} [quizId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsPost(
      content?: string,
      questionType?: QuestionType,
      timeLimitInSeconds?: number,
      points?: number,
      image?: File,
      configuration?: string,
      explanation?: string,
      quizId?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoApiResponse> {
      return localVarFp
        .apiV1QuestionsPost(
          content,
          questionType,
          timeLimitInSeconds,
          points,
          image,
          configuration,
          explanation,
          quizId,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} quizId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuestionsQuizQuizIdGet(
      quizId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuestionDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuestionsQuizQuizIdGet(quizId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuestionsApi - object-oriented interface
 * @export
 * @class QuestionsApi
 * @extends {BaseAPI}
 */
export class QuestionsApi extends BaseAPI {
  /**
   *
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsBatchByQuizzesPost(
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsBatchByQuizzesPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsBatchCountsPost(
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsBatchCountsPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsBatchDelete(
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsBatchDelete(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {Array<UpdateQuestionBulkItem>} updateQuestionBulkItem
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsBatchPut(
    updateQuestionBulkItem: Array<UpdateQuestionBulkItem>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsBatchPut(updateQuestionBulkItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {BulkCreateQuestionsRequest} [bulkCreateQuestionsRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsBulkPost(
    bulkCreateQuestionsRequest?: BulkCreateQuestionsRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsBulkPost(bulkCreateQuestionsRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [quizId]
   * @param {string} [search]
   * @param {QuestionType} [questionType]
   * @param {string} [sortBy]
   * @param {boolean} [isDescending]
   * @param {number} [pageSize]
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsGet(
    quizId?: string,
    search?: string,
    questionType?: QuestionType,
    sortBy?: string,
    isDescending?: boolean,
    pageSize?: number,
    cursor?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsGet(
        quizId,
        search,
        questionType,
        sortBy,
        isDescending,
        pageSize,
        cursor,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {string} [content]
   * @param {QuestionType} [questionType]
   * @param {number} [timeLimitInSeconds]
   * @param {number} [points]
   * @param {File} [image]
   * @param {string} [configuration]
   * @param {string} [explanation]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsIdPut(
    id: string,
    content?: string,
    questionType?: QuestionType,
    timeLimitInSeconds?: number,
    points?: number,
    image?: File,
    configuration?: string,
    explanation?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsIdPut(
        id,
        content,
        questionType,
        timeLimitInSeconds,
        points,
        image,
        configuration,
        explanation,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [content]
   * @param {QuestionType} [questionType]
   * @param {number} [timeLimitInSeconds]
   * @param {number} [points]
   * @param {File} [image]
   * @param {string} [configuration]
   * @param {string} [explanation]
   * @param {string} [quizId]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsPost(
    content?: string,
    questionType?: QuestionType,
    timeLimitInSeconds?: number,
    points?: number,
    image?: File,
    configuration?: string,
    explanation?: string,
    quizId?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsPost(
        content,
        questionType,
        timeLimitInSeconds,
        points,
        image,
        configuration,
        explanation,
        quizId,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} quizId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuestionsApi
   */
  public apiV1QuestionsQuizQuizIdGet(
    quizId: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuestionsApiFp(this.configuration)
      .apiV1QuestionsQuizQuizIdGet(quizId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuizzesApi - axios parameter creator
 * @export
 */
export const QuizzesApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesBatchDelete: async (
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists("apiV1QuizzesBatchDelete", "requestBody", requestBody);
      const localVarPath = `/api/v1/Quizzes/batch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesBatchPost: async (
      requestBody: Array<string>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestBody' is not null or undefined
      assertParamExists("apiV1QuizzesBatchPost", "requestBody", requestBody);
      const localVarPath = `/api/v1/Quizzes/batch`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        requestBody,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesCategoriesCountsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Quizzes/categories/counts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} category
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesCategoryCategoryGet: async (
      category: string,
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists(
        "apiV1QuizzesCategoryCategoryGet",
        "category",
        category,
      );
      const localVarPath = `/api/v1/Quizzes/category/{category}`.replace(
        `{${"category"}}`,
        encodeURIComponent(String(category)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [search]
     * @param {string} [category]
     * @param {boolean} [isPublic]
     * @param {string} [creatorId]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesGet: async (
      search?: string,
      category?: string,
      isPublic?: boolean,
      creatorId?: string,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Quizzes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (search !== undefined) {
        localVarQueryParameter["Search"] = search;
      }

      if (category !== undefined) {
        localVarQueryParameter["Category"] = category;
      }

      if (isPublic !== undefined) {
        localVarQueryParameter["IsPublic"] = isPublic;
      }

      if (creatorId !== undefined) {
        localVarQueryParameter["CreatorId"] = creatorId;
      }

      if (sortBy !== undefined) {
        localVarQueryParameter["SortBy"] = sortBy;
      }

      if (isDescending !== undefined) {
        localVarQueryParameter["IsDescending"] = isDescending;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["PageSize"] = pageSize;
      }

      if (cursor !== undefined) {
        localVarQueryParameter["Cursor"] = cursor;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuizzesIdDelete", "id", id);
      const localVarPath = `/api/v1/Quizzes/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuizzesIdGet", "id", id);
      const localVarPath = `/api/v1/Quizzes/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdPut: async (
      id: string,
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiV1QuizzesIdPut", "id", id);
      const localVarPath = `/api/v1/Quizzes/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (title !== undefined) {
        localVarFormParams.append("Title", title as any);
      }

      if (description !== undefined) {
        localVarFormParams.append("Description", description as any);
      }

      if (thumbnail !== undefined) {
        localVarFormParams.append("Thumbnail", thumbnail as any);
      }

      if (isPublic !== undefined) {
        localVarFormParams.append("IsPublic", String(isPublic) as any);
      }

      if (category !== undefined) {
        localVarFormParams.append("Category", category as any);
      }

      if (tags !== undefined) {
        localVarFormParams.append("Tags", tags as any);
      }

      if (estimatedDurationMinutes !== undefined) {
        localVarFormParams.append(
          "EstimatedDurationMinutes",
          estimatedDurationMinutes as any,
        );
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesMyGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Quizzes/my`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesPost: async (
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Quizzes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (title !== undefined) {
        localVarFormParams.append("Title", title as any);
      }

      if (description !== undefined) {
        localVarFormParams.append("Description", description as any);
      }

      if (thumbnail !== undefined) {
        localVarFormParams.append("Thumbnail", thumbnail as any);
      }

      if (isPublic !== undefined) {
        localVarFormParams.append("IsPublic", String(isPublic) as any);
      }

      if (category !== undefined) {
        localVarFormParams.append("Category", category as any);
      }

      if (tags !== undefined) {
        localVarFormParams.append("Tags", tags as any);
      }

      if (estimatedDurationMinutes !== undefined) {
        localVarFormParams.append(
          "EstimatedDurationMinutes",
          estimatedDurationMinutes as any,
        );
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesPublicGet: async (
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Quizzes/public`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} q
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesSearchGet: async (
      q: string,
      limit?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'q' is not null or undefined
      assertParamExists("apiV1QuizzesSearchGet", "q", q);
      const localVarPath = `/api/v1/Quizzes/search`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (q !== undefined) {
        localVarQueryParameter["q"] = q;
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuizzesApi - functional programming interface
 * @export
 */
export const QuizzesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuizzesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesBatchDelete(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesBatchDelete(
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesBatchDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesBatchPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesBatchPost(
          requestBody,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesBatchPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesCategoriesCountsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<StringInt32DictionaryApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesCategoriesCountsGet(
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesCategoriesCountsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} category
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesCategoryCategoryGet(
      category: string,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizSummaryDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesCategoryCategoryGet(
          category,
          limit,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesCategoryCategoryGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [search]
     * @param {string} [category]
     * @param {boolean} [isPublic]
     * @param {string} [creatorId]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesGet(
      search?: string,
      category?: string,
      isPublic?: boolean,
      creatorId?: string,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizSummaryDtoPagedResponseApiResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1QuizzesGet(
        search,
        category,
        isPublic,
        creatorId,
        sortBy,
        isDescending,
        pageSize,
        cursor,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesIdPut(
      id: string,
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesIdPut(
          id,
          title,
          description,
          thumbnail,
          isPublic,
          category,
          tags,
          estimatedDurationMinutes,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesMyGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizSummaryDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesMyGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesMyGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesPost(
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesPost(
          title,
          description,
          thumbnail,
          isPublic,
          category,
          tags,
          estimatedDurationMinutes,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesPublicGet(
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizSummaryDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesPublicGet(limit, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesPublicGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} q
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1QuizzesSearchGet(
      q: string,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<QuizSummaryDtoIEnumerableApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1QuizzesSearchGet(
          q,
          limit,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["QuizzesApi.apiV1QuizzesSearchGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * QuizzesApi - factory interface
 * @export
 */
export const QuizzesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = QuizzesApiFp(configuration);
  return {
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesBatchDelete(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1QuizzesBatchDelete(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesBatchPost(
      requestBody: Array<string>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuizzesBatchPost(requestBody, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesCategoriesCountsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<StringInt32DictionaryApiResponse> {
      return localVarFp
        .apiV1QuizzesCategoriesCountsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} category
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesCategoryCategoryGet(
      category: string,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizSummaryDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuizzesCategoryCategoryGet(category, limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [search]
     * @param {string} [category]
     * @param {boolean} [isPublic]
     * @param {string} [creatorId]
     * @param {string} [sortBy]
     * @param {boolean} [isDescending]
     * @param {number} [pageSize]
     * @param {string} [cursor]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesGet(
      search?: string,
      category?: string,
      isPublic?: boolean,
      creatorId?: string,
      sortBy?: string,
      isDescending?: boolean,
      pageSize?: number,
      cursor?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizSummaryDtoPagedResponseApiResponse> {
      return localVarFp
        .apiV1QuizzesGet(
          search,
          category,
          isPublic,
          creatorId,
          sortBy,
          isDescending,
          pageSize,
          cursor,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1QuizzesIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizDtoApiResponse> {
      return localVarFp
        .apiV1QuizzesIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesIdPut(
      id: string,
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizDtoApiResponse> {
      return localVarFp
        .apiV1QuizzesIdPut(
          id,
          title,
          description,
          thumbnail,
          isPublic,
          category,
          tags,
          estimatedDurationMinutes,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesMyGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizSummaryDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuizzesMyGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [title]
     * @param {string} [description]
     * @param {File} [thumbnail]
     * @param {boolean} [isPublic]
     * @param {string} [category]
     * @param {string} [tags]
     * @param {number} [estimatedDurationMinutes]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesPost(
      title?: string,
      description?: string,
      thumbnail?: File,
      isPublic?: boolean,
      category?: string,
      tags?: string,
      estimatedDurationMinutes?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizDtoApiResponse> {
      return localVarFp
        .apiV1QuizzesPost(
          title,
          description,
          thumbnail,
          isPublic,
          category,
          tags,
          estimatedDurationMinutes,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesPublicGet(
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizSummaryDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuizzesPublicGet(limit, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} q
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1QuizzesSearchGet(
      q: string,
      limit?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<QuizSummaryDtoIEnumerableApiResponse> {
      return localVarFp
        .apiV1QuizzesSearchGet(q, limit, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuizzesApi - object-oriented interface
 * @export
 * @class QuizzesApi
 * @extends {BaseAPI}
 */
export class QuizzesApi extends BaseAPI {
  /**
   *
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesBatchDelete(
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesBatchDelete(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {Array<string>} requestBody
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesBatchPost(
    requestBody: Array<string>,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesBatchPost(requestBody, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesCategoriesCountsGet(options?: RawAxiosRequestConfig) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesCategoriesCountsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} category
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesCategoryCategoryGet(
    category: string,
    limit?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesCategoryCategoryGet(category, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [search]
   * @param {string} [category]
   * @param {boolean} [isPublic]
   * @param {string} [creatorId]
   * @param {string} [sortBy]
   * @param {boolean} [isDescending]
   * @param {number} [pageSize]
   * @param {string} [cursor]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesGet(
    search?: string,
    category?: string,
    isPublic?: boolean,
    creatorId?: string,
    sortBy?: string,
    isDescending?: boolean,
    pageSize?: number,
    cursor?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesGet(
        search,
        category,
        isPublic,
        creatorId,
        sortBy,
        isDescending,
        pageSize,
        cursor,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesIdGet(id: string, options?: RawAxiosRequestConfig) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {string} [title]
   * @param {string} [description]
   * @param {File} [thumbnail]
   * @param {boolean} [isPublic]
   * @param {string} [category]
   * @param {string} [tags]
   * @param {number} [estimatedDurationMinutes]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesIdPut(
    id: string,
    title?: string,
    description?: string,
    thumbnail?: File,
    isPublic?: boolean,
    category?: string,
    tags?: string,
    estimatedDurationMinutes?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesIdPut(
        id,
        title,
        description,
        thumbnail,
        isPublic,
        category,
        tags,
        estimatedDurationMinutes,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesMyGet(options?: RawAxiosRequestConfig) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesMyGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [title]
   * @param {string} [description]
   * @param {File} [thumbnail]
   * @param {boolean} [isPublic]
   * @param {string} [category]
   * @param {string} [tags]
   * @param {number} [estimatedDurationMinutes]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesPost(
    title?: string,
    description?: string,
    thumbnail?: File,
    isPublic?: boolean,
    category?: string,
    tags?: string,
    estimatedDurationMinutes?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesPost(
        title,
        description,
        thumbnail,
        isPublic,
        category,
        tags,
        estimatedDurationMinutes,
        options,
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesPublicGet(
    limit?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesPublicGet(limit, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} q
   * @param {number} [limit]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuizzesApi
   */
  public apiV1QuizzesSearchGet(
    q: string,
    limit?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return QuizzesApiFp(this.configuration)
      .apiV1QuizzesSearchGet(q, limit, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarDelete: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/avatar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarPost: async (
      avatar: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'avatar' is not null or undefined
      assertParamExists("apiV1UsersAvatarPost", "avatar", avatar);
      const localVarPath = `/api/v1/Users/avatar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (avatar !== undefined) {
        localVarFormParams.append("Avatar", avatar as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersChangePasswordPost: async (
      changePasswordRequest?: ChangePasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changePasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfileGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfilePut: async (
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserProfileRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersAvatarDelete(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersAvatarDelete(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersAvatarDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersAvatarPost(
      avatar: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ImageResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersAvatarPost(avatar, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersAvatarPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersChangePasswordPost(
      changePasswordRequest?: ChangePasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersChangePasswordPost(
          changePasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersChangePasswordPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersProfileGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserProfileDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersProfileGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersProfileGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersProfilePut(
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersProfilePut(
          updateUserProfileRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersProfilePut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarDelete(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersAvatarDelete(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarPost(
      avatar: File,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageResponseApiResponse> {
      return localVarFp
        .apiV1UsersAvatarPost(avatar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersChangePasswordPost(
      changePasswordRequest?: ChangePasswordRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersChangePasswordPost(changePasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfileGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserProfileDtoApiResponse> {
      return localVarFp
        .apiV1UsersProfileGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfilePut(
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersProfilePut(updateUserProfileRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersAvatarDelete(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersAvatarDelete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {File} avatar
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersAvatarPost(avatar: File, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersAvatarPost(avatar, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ChangePasswordRequest} [changePasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersChangePasswordPost(
    changePasswordRequest?: ChangePasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .apiV1UsersChangePasswordPost(changePasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersProfileGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersProfileGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersProfilePut(
    updateUserProfileRequest?: UpdateUserProfileRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .apiV1UsersProfilePut(updateUserProfileRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
