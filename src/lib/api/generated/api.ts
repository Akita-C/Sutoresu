/* tslint:disable */
/* eslint-disable */
/**
 * Nemui API
 * API built with .NET
 *
 * The version of the OpenAPI document: v1
 * Contact: tranducquang.apolos@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  accessToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  refreshToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof AuthResponse
   */
  expiresAt?: string;
  /**
   *
   * @type {UserProfileDto}
   * @memberof AuthResponse
   */
  user?: UserProfileDto;
}
/**
 *
 * @export
 * @interface AuthResponseApiResponse
 */
export interface AuthResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof AuthResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof AuthResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof AuthResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {AuthResponse}
   * @memberof AuthResponseApiResponse
   */
  data?: AuthResponse;
}
/**
 *
 * @export
 * @interface BooleanApiResponse
 */
export interface BooleanApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof BooleanApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof BooleanApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof BooleanApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {boolean}
   * @memberof BooleanApiResponse
   */
  data?: boolean;
}
/**
 *
 * @export
 * @interface ChangePasswordRequest
 */
export interface ChangePasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  currentPassword?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  newPassword?: string | null;
  /**
   *
   * @type {string}
   * @memberof ChangePasswordRequest
   */
  confirmNewPassword?: string | null;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
  /**
   *
   * @type {boolean}
   * @memberof ErrorResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof ErrorResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ErrorResponse
   */
  errors?: Array<string> | null;
}
/**
 *
 * @export
 * @interface ImageResponse
 */
export interface ImageResponse {
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  publicId?: string | null;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  url?: string | null;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  secureUrl?: string | null;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  height?: number;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  format?: string | null;
  /**
   *
   * @type {number}
   * @memberof ImageResponse
   */
  bytes?: number;
  /**
   *
   * @type {string}
   * @memberof ImageResponse
   */
  createdAt?: string;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof ImageResponse
   */
  transformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface ImageResponseApiResponse
 */
export interface ImageResponseApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof ImageResponseApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof ImageResponseApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof ImageResponseApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {ImageResponse}
   * @memberof ImageResponseApiResponse
   */
  data?: ImageResponse;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password?: string | null;
}
/**
 *
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
  /**
   *
   * @type {string}
   * @memberof LogoutRequest
   */
  refreshToken?: string | null;
  /**
   *
   * @type {string}
   * @memberof LogoutRequest
   */
  accessToken?: string | null;
}
/**
 *
 * @export
 * @interface RefreshTokenRequest
 */
export interface RefreshTokenRequest {
  /**
   *
   * @type {string}
   * @memberof RefreshTokenRequest
   */
  refreshToken?: string | null;
}
/**
 *
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  password?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  passwordConfirmation?: string | null;
}
/**
 *
 * @export
 * @interface UpdateUserProfileRequest
 */
export interface UpdateUserProfileRequest {
  /**
   *
   * @type {string}
   * @memberof UpdateUserProfileRequest
   */
  name?: string | null;
}
/**
 *
 * @export
 * @interface UserProfileDto
 */
export interface UserProfileDto {
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  role?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof UserProfileDto
   */
  isEmailVerified?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  lastLoginAt?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserProfileDto
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof UserProfileDto
   */
  avatarTransformations?: { [key: string]: string } | null;
}
/**
 *
 * @export
 * @interface UserProfileDtoApiResponse
 */
export interface UserProfileDtoApiResponse {
  /**
   *
   * @type {boolean}
   * @memberof UserProfileDtoApiResponse
   */
  success?: boolean;
  /**
   *
   * @type {string}
   * @memberof UserProfileDtoApiResponse
   */
  message?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof UserProfileDtoApiResponse
   */
  errors?: Array<string> | null;
  /**
   *
   * @type {UserProfileDto}
   * @memberof UserProfileDtoApiResponse
   */
  data?: UserProfileDto;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost: async (
      loginRequest?: LoginRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLogoutPost: async (
      logoutRequest?: LogoutRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        logoutRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost: async (
      refreshTokenRequest?: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRegisterPost: async (
      registerRequest?: RegisterRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokeAllPost: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/revoke-all`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokePost: async (
      refreshTokenRequest?: RefreshTokenRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Auth/revoke`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthLoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthLoginPost(
          loginRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthLoginPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthLogoutPost(
      logoutRequest?: LogoutRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthLogoutPost(
          logoutRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthLogoutPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRefreshPost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRefreshPost(
          refreshTokenRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRefreshPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRegisterPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AuthResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRegisterPost(
          registerRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRegisterPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRevokeAllPost(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRevokeAllPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRevokeAllPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1AuthRevokePost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1AuthRevokePost(
          refreshTokenRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthApi.apiV1AuthRevokePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthApiFp(configuration);
  return {
    /**
     *
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLoginPost(
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthLoginPost(loginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LogoutRequest} [logoutRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthLogoutPost(
      logoutRequest?: LogoutRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthLogoutPost(logoutRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRefreshPost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthRefreshPost(refreshTokenRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRegisterPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AuthResponseApiResponse> {
      return localVarFp
        .apiV1AuthRegisterPost(registerRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokeAllPost(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthRevokeAllPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshTokenRequest} [refreshTokenRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1AuthRevokePost(
      refreshTokenRequest?: RefreshTokenRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1AuthRevokePost(refreshTokenRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthLoginPost(
    loginRequest?: LoginRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthLoginPost(loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LogoutRequest} [logoutRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthLogoutPost(
    logoutRequest?: LogoutRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthLogoutPost(logoutRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshTokenRequest} [refreshTokenRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRefreshPost(
    refreshTokenRequest?: RefreshTokenRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRefreshPost(refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegisterRequest} [registerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRegisterPost(
    registerRequest?: RegisterRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRegisterPost(registerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRevokeAllPost(options?: RawAxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRevokeAllPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshTokenRequest} [refreshTokenRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public apiV1AuthRevokePost(
    refreshTokenRequest?: RefreshTokenRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthApiFp(this.configuration)
      .apiV1AuthRevokePost(refreshTokenRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarDelete: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/avatar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarPost: async (
      avatar: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'avatar' is not null or undefined
      assertParamExists("apiV1UsersAvatarPost", "avatar", avatar);
      const localVarPath = `/api/v1/Users/avatar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      if (avatar !== undefined) {
        localVarFormParams.append("Avatar", avatar as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersChangePasswordPost: async (
      changePasswordRequest?: ChangePasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        changePasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfileGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfilePut: async (
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/Users/profile`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "Authorization",
        configuration,
      );

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserProfileRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersAvatarDelete(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersAvatarDelete(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersAvatarDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersAvatarPost(
      avatar: File,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ImageResponseApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersAvatarPost(avatar, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersAvatarPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersChangePasswordPost(
      changePasswordRequest?: ChangePasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersChangePasswordPost(
          changePasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersChangePasswordPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersProfileGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserProfileDtoApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersProfileGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersProfileGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiV1UsersProfilePut(
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<BooleanApiResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiV1UsersProfilePut(
          updateUserProfileRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiV1UsersProfilePut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarDelete(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersAvatarDelete(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {File} avatar
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersAvatarPost(
      avatar: File,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageResponseApiResponse> {
      return localVarFp
        .apiV1UsersAvatarPost(avatar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ChangePasswordRequest} [changePasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersChangePasswordPost(
      changePasswordRequest?: ChangePasswordRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersChangePasswordPost(changePasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfileGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserProfileDtoApiResponse> {
      return localVarFp
        .apiV1UsersProfileGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1UsersProfilePut(
      updateUserProfileRequest?: UpdateUserProfileRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<BooleanApiResponse> {
      return localVarFp
        .apiV1UsersProfilePut(updateUserProfileRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersAvatarDelete(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersAvatarDelete(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {File} avatar
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersAvatarPost(avatar: File, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersAvatarPost(avatar, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ChangePasswordRequest} [changePasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersChangePasswordPost(
    changePasswordRequest?: ChangePasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .apiV1UsersChangePasswordPost(changePasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersProfileGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiV1UsersProfileGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateUserProfileRequest} [updateUserProfileRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiV1UsersProfilePut(
    updateUserProfileRequest?: UpdateUserProfileRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .apiV1UsersProfilePut(updateUserProfileRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
